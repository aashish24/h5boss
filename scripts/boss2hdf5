#!/usr/bin/env python

"""
Create an HDF5 file from BOSS data
"""

from __future__ import division, print_function

import sys, os
import numpy as np
from astropy.io import fits
from astropy.table import Table
import h5boss.io

import optparse

parser = optparse.OptionParser(usage = "%prog [options]")
parser.add_option("-i", "--input", type=str,  help="input spPlate file")
parser.add_option("-o", "--output", type=str,  help="input hdf5 file")
# parser.add_option("-v", "--verbose", action="store_true", help="more verbose output")

opts, args = parser.parse_args()

platefile = opts.input
filedir = os.path.split(os.path.abspath(platefile))[0]

hdr = fits.getheader(platefile)
plate = hdr['PLATEID']
mjd = hdr['MJD']

#--- Plugmap ---
plugmap = Table.read(platefile, 5)
dataname = '{}/{}/plugmap'.format(plate, mjd)
plugmap.write(opts.output, path=dataname, append=True)

#--- zbest ---
run1d = hdr['RUN2D']  #- default run1d == run2d
zbestfile = platefile.replace('spPlate', '{}/spZbest'.format(run1d))
zbest = Table.read(zbestfile, 1)
dataname = '{}/{}/zbest'.format(plate, mjd)
zbest.write(opts.output, path=dataname, append=True)

#--- zall (skip) ---
pass

#--- zline ---
zlinefile = zbestfile.replace('spZbest-', 'spZline-')
zline = Table.read(zlinefile, 1)
dataname = '{}/{}/zline'.format(plate, mjd)
zline.write(opts.output, path=dataname, append=True)

#--- photometric matches ---
photomatchfile = platefile.replace('spPlate-', 'photoMatchPlate-')
photomatch = Table.read(photomatchfile, 1)
dataname = '{}/{}/photo/match'.format(plate, mjd)
photomatch.write(opts.output, path=dataname, append=True)

photoposfile = platefile.replace('spPlate-', 'photoPosPlate-')
photopos = Table.read(photoposfile, 1)
dataname = '{}/{}/photo/matchpos'.format(plate, mjd)
photopos.write(opts.output, path=dataname, append=True)

photofluxfile = platefile.replace('spPlate-', 'photoPlate-')
photoflux = Table.read(photofluxfile, 1)
dataname = '{}/{}/photo/matchflux'.format(plate, mjd)
photoflux.write(opts.output, path=dataname, append=True)

#-------------------------------------------------------------------------
#--- Coadd ---
print('loading coadds')
coadds = h5boss.io.load_coadds(platefile)

print('writing coadds')
for i, cx in enumerate(coadds):
    ### if i%100 != 0: continue  #- TESTING            
    dataname = '{}/{}/{}/coadd'.format(plate, mjd, i+1)
    cx.write(opts.output, path=dataname, append=True)

#- Parse spPlancomb to get exposures that were used
planfile = platefile.replace('spPlate-', 'spPlancomb-').replace('.fits', '.par')
framefiles = list()
for line in open(planfile):
    if line.startswith('SPEXP '):
        tmp = line.split()
        tmp = [x+'.gz' for x in tmp[7:-1]]
        framefiles.extend(tmp)
        
print('processing frames')
for filename in framefiles:
    print(filename)
    frame = h5boss.io.load_frame(filedir+'/'+filename)
    if ('spFrame-b1' in filename) or ('spFrame-r1' in filename):
        offset = 0
    elif ('spFrame-b2' in filename) or ('spFrame-r2' in filename):
        offset = 500
    else:
        print('huh?', filename)
        sys.exit(1)
    
    for i, fx in enumerate(frame):
        ### if i%100 != 0: continue  #- TESTING            
        frameid = '{}-{:08d}'.format(fx.meta['CAMERAS'], fx.meta['EXPOSURE'])
        fiber = offset+i+1
        dataname = '{}/{}/{}/frames/{}'.format(plate, mjd, fiber, frameid)
        fx.write(opts.output, path=dataname, append=True)
    

    
